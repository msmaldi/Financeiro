// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Msmaldi.Financeiro.Website.Data;
using System;

namespace Msmaldi.Financeiro.Website.Data.Migrations
{
    [DbContext(typeof(FinanceiroDbContext))]
    [Migration("20180414212352_AddSwingTradesTable")]
    partial class AddSwingTradesTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Msmaldi.AspNetCore.GuIdentity.GuIdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.CDBComCDI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataDaAplicacao")
                        .HasColumnType("date");

                    b.Property<DateTime>("DataDoVencimento")
                        .HasColumnType("date");

                    b.Property<double>("PrecoUnitario");

                    b.Property<int>("Quantidade");

                    b.Property<double>("Taxa");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CDBsComCDI");
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.DIOver", b =>
                {
                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<double>("Taxa");

                    b.HasKey("Data");

                    b.ToTable("TaxasDIOver");
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.Feriado", b =>
                {
                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<string>("Nome");

                    b.HasKey("Data");

                    b.ToTable("Feriados");
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.ResgateCDBComCDI", b =>
                {
                    b.Property<int>("CDBComCDIId");

                    b.Property<DateTime>("Data")
                        .HasColumnType("date");

                    b.Property<int>("Quantidade");

                    b.HasKey("CDBComCDIId", "Data");

                    b.ToTable("ResgateCDBComCDI");
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.Stock", b =>
                {
                    b.Property<string>("Symbol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar(16)");

                    b.HasKey("Symbol");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.StockQuoteDaily", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(16)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<double>("Close");

                    b.Property<double>("Open");

                    b.HasKey("Symbol", "Date");

                    b.ToTable("StockQuotesDaily");
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.SwingTrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Quantidade");

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(16)");

                    b.Property<Guid>("UserId");

                    b.Property<double>("ValorDeAquisicao");

                    b.HasKey("Id");

                    b.HasIndex("Symbol");

                    b.HasIndex("UserId");

                    b.ToTable("SwingTrades");
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Msmaldi.AspNetCore.GuIdentity.GuIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Msmaldi.Financeiro.Website.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Msmaldi.Financeiro.Website.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Msmaldi.AspNetCore.GuIdentity.GuIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Msmaldi.Financeiro.Website.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Msmaldi.Financeiro.Website.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.CDBComCDI", b =>
                {
                    b.HasOne("Msmaldi.Financeiro.Website.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.ResgateCDBComCDI", b =>
                {
                    b.HasOne("Msmaldi.Financeiro.Website.Entities.CDBComCDI")
                        .WithMany("Resgates")
                        .HasForeignKey("CDBComCDIId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.StockQuoteDaily", b =>
                {
                    b.HasOne("Msmaldi.Financeiro.Website.Entities.Stock")
                        .WithMany("StockQuotesDaily")
                        .HasForeignKey("Symbol")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Msmaldi.Financeiro.Website.Entities.SwingTrade", b =>
                {
                    b.HasOne("Msmaldi.Financeiro.Website.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("Symbol");

                    b.HasOne("Msmaldi.Financeiro.Website.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
